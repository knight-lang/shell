#!/bin/sh

################################################################################

## Naming scheme for vairables
# READ_ONLY
# Global_Variables
# local_variable

## Here's how values are represented:
# i-?\d+                 - integer
# s.*                    - string
# [TFN]                  - true/false/null
# v[a-z_][a-z0-9_]       - variable
# a(\d+)(${ARY_SEP}ele)* - array; \1 is len, \2+ elements. ele cant be an array
# A(\d+)                 - array ref; `eval`ing it gives you the original array
# f(.)(${FN_SEP}ele)*    - function; \1 is name, \2+ are arguments.
# F(\d+)                 - fn ref, `eval`ing it will give you the original fn
##

################################################################################
#                                                                              #
#                                   Setup                                      #
#                                                                              #
################################################################################

# If executed using bash, make sure it's posix compliant
if [ -n "$BASH_VERSION" ]; then
	export POSIXLY_CORRECT=1
	set -o posix
fi

## Set options
set -o nounset -o noglob

## Separators to separate elements; these don't exist in the Knight encoding set
# so they're safe to use. (I picked the ascii separators for fun, but it could
# be anything that's not in Knight and not considered whitespace.)
readonly FN_SEP="$(printf \\036)" # 036 is "Record separator"
readonly ARY_SEP="$(printf \\037)" # 037 is "Unit separator"
readonly EXEC_SEP="$(printf \\034)" # 034 is "File separator"

## Ensure `a-z` & co when parsing are POSIX compliant. Without this, it's
# actually entirely implementation defined what `a-z` means.
readonly LC_COLLATE=POSIX

## Used in error messages
readonly SCRIPT_NAME=${0##*/}

## Required in a few places
readonly NEWLINE='
'

## Hack required in case the directory containing this file ends in a `\n` lol
KNIGHT_DIR=$(dirname -- "$0" && printf x) || {
	pritnf >&2 '%s: [FATAL] cannot get directory of this script\n' \
		"$SCRIPT_NAME"
	exit 3
}
readonly KNIGHT_DIR="${KNIGHT_DIR%?x}"

################################################################################
#                                                                              #
#                            Import Knight Files                               #
#                                                                              #
################################################################################

. "$KNIGHT_DIR/arrays.sh"
. "$KNIGHT_DIR/conversions.sh"
. "$KNIGHT_DIR/utilities.sh"
. "$KNIGHT_DIR/parsing.sh"
. "$KNIGHT_DIR/evaluating.sh"

################################################################################
#                                                                              #
#                       Handle Command-line Arguments                          #
#                                                                              #
################################################################################

usage () { cat >&$(($1 + 1)); exit $1; } <<EOS
usage: $(basename "$0") [-h] (-e 'script' | -f filename)
EOS

[ "$1" = -h ] && usage 0
[ $# -ne 2 ] && usage 1

case $1 in
	-e) next_expr <<-EOS ;;
$2
	EOS
	-f) next_expr <"$2" ;; # TODO: does this need to be quoted
	*)  usage 1 ;;
esac

run "$Reply"
